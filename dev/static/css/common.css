/*
LESS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: @icon-home-width;
}

The large array-like variables contain all information about a single icon
@icon-home: x y offset_x offset_y width height total_width total_height image_path name;

At the bottom of this section, we provide information about the spritesheet itself
@spritesheet: width height image @spritesheet-sprites;
*/
/*
The provided classes are intended to be used with the array-like variables

.icon-home {
  .sprite-width(@icon-home);
}
.icon-email {
  .sprite(@icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
/*
The `.sprites` mixin generates identical output to the CSS template
  but can be overridden inside of LESS

This must be run when you have at least 2 sprites.
  If run with a single sprite, then there will be reference errors.

.sprites(@spritesheet-sprites);
*/
body {
  padding-top: 50px;
}
.starter-template {
  padding: 40px 15px;
  text-align: center;
}
.icon {
  display: inline-block;
}
.icon-weibo {
  background-image: url(../images/sprite/sprite.png);
  background-position: 0px 0px;
  width: 32px;
  height: 32px;
}
.icon-weixin {
  background-image: url(../images/sprite/sprite.png);
  background-position: -36px 0px;
  width: 32px;
  height: 32px;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbW1vbi5sZXNzIiwic3ByaXRlL3Nwcml0ZS5sZXNzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0E7RUFDSSxpQkFBQTs7QUFFSjtFQUNJLGtCQUFBO0VBQ0Esa0JBQUE7O0FBRUo7RUFDSSxxQkFBQTs7QUFFSjtFQ3dFRSxrREFBQTtFQU5BLDRCQUFBO0VBVkEsV0FBQTtFQUlBLFlBQUE7O0FEekRGO0VDcUVFLGtEQUFBO0VBTkEsOEJBQUE7RUFWQSxXQUFBO0VBSUEsWUFBQSIsInNvdXJjZXNDb250ZW50IjpbIkBpbXBvcnQgXCJzcHJpdGUvc3ByaXRlLmxlc3NcIjtcbmJvZHkge1xuICAgIHBhZGRpbmctdG9wOiA1MHB4O1xufVxuLnN0YXJ0ZXItdGVtcGxhdGUge1xuICAgIHBhZGRpbmc6IDQwcHggMTVweDtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG4uaWNvbiB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xufVxuLmljb24td2VpYm8ge1xuICAgIC5zcHJpdGUoQHdlaWJvKTtcbn1cbi5pY29uLXdlaXhpbiB7XG4gICAgLnNwcml0ZShAd2VpeGluKTtcbn1cbiIsIi8qXG5MRVNTIHZhcmlhYmxlcyBhcmUgaW5mb3JtYXRpb24gYWJvdXQgaWNvbidzIGNvbXBpbGVkIHN0YXRlLCBzdG9yZWQgdW5kZXIgaXRzIG9yaWdpbmFsIGZpbGUgbmFtZVxuXG4uaWNvbi1ob21lIHtcbiAgd2lkdGg6IEBpY29uLWhvbWUtd2lkdGg7XG59XG5cblRoZSBsYXJnZSBhcnJheS1saWtlIHZhcmlhYmxlcyBjb250YWluIGFsbCBpbmZvcm1hdGlvbiBhYm91dCBhIHNpbmdsZSBpY29uXG5AaWNvbi1ob21lOiB4IHkgb2Zmc2V0X3ggb2Zmc2V0X3kgd2lkdGggaGVpZ2h0IHRvdGFsX3dpZHRoIHRvdGFsX2hlaWdodCBpbWFnZV9wYXRoIG5hbWU7XG5cbkF0IHRoZSBib3R0b20gb2YgdGhpcyBzZWN0aW9uLCB3ZSBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHRoZSBzcHJpdGVzaGVldCBpdHNlbGZcbkBzcHJpdGVzaGVldDogd2lkdGggaGVpZ2h0IGltYWdlIEBzcHJpdGVzaGVldC1zcHJpdGVzO1xuKi9cbkB3ZWliby1uYW1lOiAnd2VpYm8nO1xuQHdlaWJvLXg6IDBweDtcbkB3ZWliby15OiAwcHg7XG5Ad2VpYm8tb2Zmc2V0LXg6IDBweDtcbkB3ZWliby1vZmZzZXQteTogMHB4O1xuQHdlaWJvLXdpZHRoOiAzMnB4O1xuQHdlaWJvLWhlaWdodDogMzJweDtcbkB3ZWliby10b3RhbC13aWR0aDogNjhweDtcbkB3ZWliby10b3RhbC1oZWlnaHQ6IDMycHg7XG5Ad2VpYm8taW1hZ2U6ICcuLi8uLi9pbWFnZXMvc3ByaXRlL3Nwcml0ZS5wbmcnO1xuQHdlaWJvOiAwcHggMHB4IDBweCAwcHggMzJweCAzMnB4IDY4cHggMzJweCAnLi4vLi4vaW1hZ2VzL3Nwcml0ZS9zcHJpdGUucG5nJyAnd2VpYm8nO1xuQHdlaXhpbi1uYW1lOiAnd2VpeGluJztcbkB3ZWl4aW4teDogMzZweDtcbkB3ZWl4aW4teTogMHB4O1xuQHdlaXhpbi1vZmZzZXQteDogLTM2cHg7XG5Ad2VpeGluLW9mZnNldC15OiAwcHg7XG5Ad2VpeGluLXdpZHRoOiAzMnB4O1xuQHdlaXhpbi1oZWlnaHQ6IDMycHg7XG5Ad2VpeGluLXRvdGFsLXdpZHRoOiA2OHB4O1xuQHdlaXhpbi10b3RhbC1oZWlnaHQ6IDMycHg7XG5Ad2VpeGluLWltYWdlOiAnLi4vLi4vaW1hZ2VzL3Nwcml0ZS9zcHJpdGUucG5nJztcbkB3ZWl4aW46IDM2cHggMHB4IC0zNnB4IDBweCAzMnB4IDMycHggNjhweCAzMnB4ICcuLi8uLi9pbWFnZXMvc3ByaXRlL3Nwcml0ZS5wbmcnICd3ZWl4aW4nO1xuQHNwcml0ZXNoZWV0LXdpZHRoOiA2OHB4O1xuQHNwcml0ZXNoZWV0LWhlaWdodDogMzJweDtcbkBzcHJpdGVzaGVldC1pbWFnZTogJy4uLy4uL2ltYWdlcy9zcHJpdGUvc3ByaXRlLnBuZyc7XG5Ac3ByaXRlc2hlZXQtc3ByaXRlczogQHdlaWJvIEB3ZWl4aW47XG5Ac3ByaXRlc2hlZXQ6IDY4cHggMzJweCAnLi4vLi4vaW1hZ2VzL3Nwcml0ZS9zcHJpdGUucG5nJyBAc3ByaXRlc2hlZXQtc3ByaXRlcztcblxuLypcblRoZSBwcm92aWRlZCBjbGFzc2VzIGFyZSBpbnRlbmRlZCB0byBiZSB1c2VkIHdpdGggdGhlIGFycmF5LWxpa2UgdmFyaWFibGVzXG5cbi5pY29uLWhvbWUge1xuICAuc3ByaXRlLXdpZHRoKEBpY29uLWhvbWUpO1xufVxuLmljb24tZW1haWwge1xuICAuc3ByaXRlKEBpY29uLWVtYWlsKTtcbn1cblxuRXhhbXBsZSB1c2FnZSBpbiBIVE1MOlxuXG5gZGlzcGxheTogYmxvY2tgIHNwcml0ZTpcbjxkaXYgY2xhc3M9XCJpY29uLWhvbWVcIj48L2Rpdj5cblxuVG8gY2hhbmdlIGBkaXNwbGF5YCAoZS5nLiBgZGlzcGxheTogaW5saW5lLWJsb2NrO2ApLCB3ZSBzdWdnZXN0IHVzaW5nIGEgY29tbW9uIENTUyBjbGFzczpcblxuLy8gQ1NTXG4uaWNvbiB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbn1cblxuLy8gSFRNTFxuPGkgY2xhc3M9XCJpY29uIGljb24taG9tZVwiPjwvaT5cbiovXG4uc3ByaXRlLXdpZHRoKEBzcHJpdGUpIHtcbiAgd2lkdGg6IGV4dHJhY3QoQHNwcml0ZSwgNSk7XG59XG5cbi5zcHJpdGUtaGVpZ2h0KEBzcHJpdGUpIHtcbiAgaGVpZ2h0OiBleHRyYWN0KEBzcHJpdGUsIDYpO1xufVxuXG4uc3ByaXRlLXBvc2l0aW9uKEBzcHJpdGUpIHtcbiAgQHNwcml0ZS1vZmZzZXQteDogZXh0cmFjdChAc3ByaXRlLCAzKTtcbiAgQHNwcml0ZS1vZmZzZXQteTogZXh0cmFjdChAc3ByaXRlLCA0KTtcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogQHNwcml0ZS1vZmZzZXQteCBAc3ByaXRlLW9mZnNldC15O1xufVxuXG4uc3ByaXRlLWltYWdlKEBzcHJpdGUpIHtcbiAgQHNwcml0ZS1pbWFnZTogZXh0cmFjdChAc3ByaXRlLCA5KTtcbiAgQHNwcml0ZS1pbWFnZS1iYXJlOiB+YFwiQHtzcHJpdGUtaW1hZ2V9XCIuc2xpY2UoMSwgLTEpYDtcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKEBzcHJpdGUtaW1hZ2UtYmFyZSk7XG59XG5cbi5zcHJpdGUoQHNwcml0ZSkge1xuICAuc3ByaXRlLWltYWdlKEBzcHJpdGUpO1xuICAuc3ByaXRlLXBvc2l0aW9uKEBzcHJpdGUpO1xuICAuc3ByaXRlLXdpZHRoKEBzcHJpdGUpO1xuICAuc3ByaXRlLWhlaWdodChAc3ByaXRlKTtcbn1cblxuLypcblRoZSBgLnNwcml0ZXNgIG1peGluIGdlbmVyYXRlcyBpZGVudGljYWwgb3V0cHV0IHRvIHRoZSBDU1MgdGVtcGxhdGVcbiAgYnV0IGNhbiBiZSBvdmVycmlkZGVuIGluc2lkZSBvZiBMRVNTXG5cblRoaXMgbXVzdCBiZSBydW4gd2hlbiB5b3UgaGF2ZSBhdCBsZWFzdCAyIHNwcml0ZXMuXG4gIElmIHJ1biB3aXRoIGEgc2luZ2xlIHNwcml0ZSwgdGhlbiB0aGVyZSB3aWxsIGJlIHJlZmVyZW5jZSBlcnJvcnMuXG5cbi5zcHJpdGVzKEBzcHJpdGVzaGVldC1zcHJpdGVzKTtcbiovXG4uc3ByaXRlcyhAc3ByaXRlcywgQGk6IDEpIHdoZW4gKEBpIDw9IGxlbmd0aChAc3ByaXRlcykpIHtcbiAgQHNwcml0ZTogZXh0cmFjdChAc3ByaXRlcywgQGkpO1xuICBAc3ByaXRlLW5hbWU6IGUoZXh0cmFjdChAc3ByaXRlLCAxMCkpO1xuICAuQHtzcHJpdGUtbmFtZX0ge1xuICAgIC5zcHJpdGUoQHNwcml0ZSk7XG4gIH1cbiAgLnNwcml0ZXMoQHNwcml0ZXMsIEBpICsgMSk7XG59XG4iXSwiZmlsZSI6ImNvbW1vbi5jc3MifQ== */
